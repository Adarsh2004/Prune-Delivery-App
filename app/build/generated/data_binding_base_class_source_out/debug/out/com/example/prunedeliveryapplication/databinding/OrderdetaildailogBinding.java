// Generated by view binder compiler. Do not edit!
package com.example.prunedeliveryapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.prunedeliveryapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class OrderdetaildailogBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Button CloseButton;

  @NonNull
  public final TextView Name;

  @NonNull
  public final TextView Orderid;

  @NonNull
  public final TextView addressId;

  @NonNull
  public final TextView customerId;

  @NonNull
  public final TextView merchantName;

  @NonNull
  public final TextView nameId;

  @NonNull
  public final LinearLayout ordertxt;

  @NonNull
  public final TextView phoneId;

  @NonNull
  public final TextView productId;

  @NonNull
  public final ScrollView scrollorder;

  @NonNull
  public final TextView timeslotId;

  private OrderdetaildailogBinding(@NonNull RelativeLayout rootView, @NonNull Button CloseButton,
      @NonNull TextView Name, @NonNull TextView Orderid, @NonNull TextView addressId,
      @NonNull TextView customerId, @NonNull TextView merchantName, @NonNull TextView nameId,
      @NonNull LinearLayout ordertxt, @NonNull TextView phoneId, @NonNull TextView productId,
      @NonNull ScrollView scrollorder, @NonNull TextView timeslotId) {
    this.rootView = rootView;
    this.CloseButton = CloseButton;
    this.Name = Name;
    this.Orderid = Orderid;
    this.addressId = addressId;
    this.customerId = customerId;
    this.merchantName = merchantName;
    this.nameId = nameId;
    this.ordertxt = ordertxt;
    this.phoneId = phoneId;
    this.productId = productId;
    this.scrollorder = scrollorder;
    this.timeslotId = timeslotId;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static OrderdetaildailogBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OrderdetaildailogBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.orderdetaildailog, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OrderdetaildailogBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Close_button;
      Button CloseButton = ViewBindings.findChildViewById(rootView, id);
      if (CloseButton == null) {
        break missingId;
      }

      id = R.id.Name;
      TextView Name = ViewBindings.findChildViewById(rootView, id);
      if (Name == null) {
        break missingId;
      }

      id = R.id.Orderid;
      TextView Orderid = ViewBindings.findChildViewById(rootView, id);
      if (Orderid == null) {
        break missingId;
      }

      id = R.id.address_id;
      TextView addressId = ViewBindings.findChildViewById(rootView, id);
      if (addressId == null) {
        break missingId;
      }

      id = R.id.customer_id;
      TextView customerId = ViewBindings.findChildViewById(rootView, id);
      if (customerId == null) {
        break missingId;
      }

      id = R.id.merchantName;
      TextView merchantName = ViewBindings.findChildViewById(rootView, id);
      if (merchantName == null) {
        break missingId;
      }

      id = R.id.name_id;
      TextView nameId = ViewBindings.findChildViewById(rootView, id);
      if (nameId == null) {
        break missingId;
      }

      id = R.id.ordertxt;
      LinearLayout ordertxt = ViewBindings.findChildViewById(rootView, id);
      if (ordertxt == null) {
        break missingId;
      }

      id = R.id.phone_id;
      TextView phoneId = ViewBindings.findChildViewById(rootView, id);
      if (phoneId == null) {
        break missingId;
      }

      id = R.id.product_id;
      TextView productId = ViewBindings.findChildViewById(rootView, id);
      if (productId == null) {
        break missingId;
      }

      id = R.id.scrollorder;
      ScrollView scrollorder = ViewBindings.findChildViewById(rootView, id);
      if (scrollorder == null) {
        break missingId;
      }

      id = R.id.timeslot_id;
      TextView timeslotId = ViewBindings.findChildViewById(rootView, id);
      if (timeslotId == null) {
        break missingId;
      }

      return new OrderdetaildailogBinding((RelativeLayout) rootView, CloseButton, Name, Orderid,
          addressId, customerId, merchantName, nameId, ordertxt, phoneId, productId, scrollorder,
          timeslotId);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
